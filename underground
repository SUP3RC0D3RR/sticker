local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local lp = Players.LocalPlayer
local cam = workspace.CurrentCamera

local SCALE_AMOUNT = 3
local predictionStrength = 2
local undergroundHeight = -3.5

local currentTarget = nil
local lastHumanoid = nil
local lastTargetUserId = nil
local underground = false
local isTeleportedUp = false

local function scaleTorsoOnly(part)
    if not part then return end
    part.Transparency = 1
    part.LocalTransparencyModifier = 1
    local mesh = part:FindFirstChildWhichIsA("SpecialMesh")
    if mesh then
        mesh.Scale = mesh.Scale * SCALE_AMOUNT
    end
end

local function applyTorsoHitbox(character)
    local upper = character:FindFirstChild("UpperTorso")
    local lower = character:FindFirstChild("LowerTorso")
    local torso = character:FindFirstChild("Torso")
    if upper then scaleTorsoOnly(upper) end
    if lower then scaleTorsoOnly(lower) end
    if torso then scaleTorsoOnly(torso) end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(char)
        applyTorsoHitbox(char)
    end)
    if player.Character then
        applyTorsoHitbox(player.Character)
    end
end

for _, plr in pairs(Players:GetPlayers()) do
    onPlayerAdded(plr)
end
Players.PlayerAdded:Connect(onPlayerAdded)

local function getClosestPlayer(excludeUserId)
    local char = lp.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local closest, minDist = nil, math.huge
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= lp and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            if plr.UserId ~= excludeUserId then
                local dist = (hrp.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                if dist < minDist then
                    closest = plr
                    minDist = dist
                end
            end
        end
    end
    if not closest then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= lp and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                if plr.UserId ~= excludeUserId then
                    return plr
                end
            end
        end
    end
    return closest
end

local function getGroundDistance(part)
    if not part or not part:IsDescendantOf(workspace) then return 0 end
    local rayOrigin = part.Position
    local rayDirection = Vector3.new(0, -100, 0)
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = { part.Parent }
    local result = workspace:Raycast(rayOrigin, rayDirection, params)
    if result then
        return (part.Position - result.Position).Magnitude
    end
    return 0
end

local gui1 = Instance.new("ScreenGui")
gui1.Name = "UndergroundGUI"
gui1.ResetOnSpawn = false
gui1.Parent = lp:WaitForChild("PlayerGui")

local notif1 = Instance.new("TextLabel")
notif1.Size = UDim2.new(0, 320, 0, 40)
notif1.Position = UDim2.new(0.5, 0, 0.5, 0)
notif1.AnchorPoint = Vector2.new(0.5, 0.5)
notif1.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
notif1.TextColor3 = Color3.new(1, 1, 1)
notif1.Text = "made by stxr._. on discord."
notif1.TextScaled = true
notif1.Font = Enum.Font.GothamBold
notif1.Parent = gui1

local corner1 = Instance.new("UICorner")
corner1.Parent = notif1

task.delay(3, function()
    notif1:Destroy()
end)

local buttonToggle = Instance.new("TextButton")
buttonToggle.Size = UDim2.new(0, 180, 0, 40)
buttonToggle.Position = UDim2.new(0, 10, 0, 10)
buttonToggle.Text = "Underground: OFF"
buttonToggle.BackgroundColor3 = Color3.fromRGB(60, 60, 110)
buttonToggle.TextColor3 = Color3.new(1, 1, 1)
buttonToggle.TextScaled = true
buttonToggle.Font = Enum.Font.GothamBold
buttonToggle.BorderSizePixel = 0
buttonToggle.AutoButtonColor = true
buttonToggle.Parent = gui1

local uicorner1 = Instance.new("UICorner")
uicorner1.Parent = buttonToggle

local gui2 = Instance.new("ScreenGui")
gui2.Name = "TargetSwitchGUI"
gui2.ResetOnSpawn = false
gui2.Parent = lp:WaitForChild("PlayerGui")

local buttonSwitch = Instance.new("TextButton")
buttonSwitch.Size = UDim2.new(0, 180, 0, 40)
buttonSwitch.Position = UDim2.new(1, -190, 0, 10)
buttonSwitch.AnchorPoint = Vector2.new(1, 0)
buttonSwitch.Text = "Switch Target"
buttonSwitch.BackgroundColor3 = Color3.fromRGB(60, 60, 110)
buttonSwitch.TextColor3 = Color3.new(1, 1, 1)
buttonSwitch.TextScaled = true
buttonSwitch.Font = Enum.Font.GothamBold
buttonSwitch.BorderSizePixel = 0
buttonSwitch.AutoButtonColor = true
buttonSwitch.Parent = gui2

local uicorner2 = Instance.new("UICorner")
uicorner2.Parent = buttonSwitch

buttonToggle.MouseButton1Click:Connect(function()
    underground = not underground
    buttonToggle.Text = underground and "Underground: ON" or "Underground: OFF"
    local char = lp.Character
    if not underground and char and char:FindFirstChild("HumanoidRootPart") then
        char.HumanoidRootPart.CFrame += Vector3.new(0, 5, 0)
        isTeleportedUp = false
    end
    if char and char:FindFirstChild("Humanoid") then
        cam.CameraSubject = char.Humanoid
    end
end)

buttonSwitch.MouseButton1Click:Connect(function()
    local newTarget = getClosestPlayer(currentTarget and currentTarget.UserId or nil)
    if newTarget then
        currentTarget = newTarget
        lastHumanoid = nil
        lastTargetUserId = newTarget.UserId
        isTeleportedUp = false
    end
end)

local function connectJumpListener(humanoid, targetHRP)
    humanoid:GetPropertyChangedSignal("Jump"):Connect(function()
        if not underground then return end
        local char = lp.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then return end
        local hrp = char.HumanoidRootPart
        if humanoid.Jump and not isTeleportedUp then
            hrp.CFrame = CFrame.new(hrp.Position.X, hrp.Position.Y + 5000, hrp.Position.Z)
            isTeleportedUp = true
        elseif not humanoid.Jump and isTeleportedUp then
            local targetPos = targetHRP.Position
            hrp.CFrame = CFrame.new(targetPos.X, targetPos.Y + undergroundHeight, targetPos.Z)
            isTeleportedUp = false
        end
    end)
end

local function updateTarget()
    local char = lp.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local valid = currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = valid and currentTarget.Character:FindFirstChild("Humanoid")

    if valid and humanoid and humanoid.Health > 0 then
        if humanoid ~= lastHumanoid then
            lastHumanoid = humanoid
            connectJumpListener(humanoid, currentTarget.Character.HumanoidRootPart)
        end

        local targetHRP = currentTarget.Character.HumanoidRootPart
        local velocity = targetHRP.Velocity
        local predOffset = velocity.Magnitude > 2 and velocity.Unit * predictionStrength or Vector3.zero
        local targetPos = targetHRP.Position + predOffset

        local distFromGround = getGroundDistance(targetHRP)
        local dropOffset = distFromGround > 1 and -4 or 0

        local finalPos = Vector3.new(
            targetPos.X,
            targetPos.Y + undergroundHeight + dropOffset,
            targetPos.Z
        )

        hrp.CFrame = CFrame.new(finalPos, finalPos + Vector3.new(0, 1, 0))
        cam.CameraSubject = humanoid
    else
        local newTarget = getClosestPlayer(currentTarget and currentTarget.UserId or nil)
        if newTarget and newTarget.Character and newTarget.Character:FindFirstChild("Humanoid") then
            currentTarget = newTarget
            lastHumanoid = nil
            lastTargetUserId = newTarget.UserId
            isTeleportedUp = false
        end
    end
end

RunService.Heartbeat:Connect(function()
    if underground then
        updateTarget()
    end
end)
